version: "3.9"

services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev1234
      POSTGRES_DB: authentication
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"

  redis:
    image: redis:8.2
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redisinsight:
    image: redis/redisinsight:2.70
    restart: always
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data

  kafka:
    image: apache/kafka:4.0.0
    container_name: broker
    restart: always
    ports:
      - "9092:9092"       # pour le backend Rust local ou clients externes
      - "29092:29092"     # pour les autres conteneurs Docker internes
      - "9093:9093"       # controller
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:
  kafka_data:
